#include "updateRoad.h"


struct road* RoadVide(){

  struct road * new_road = (struct road *)malloc(sizeof(struct road));

  struct lelement * llm_t = llm_empty();
  llm_t->data = (struct tuille *)malloc(sizeof(struct tuille));
  struct tuille * tmp_t = (struct tuille *)llm_t->data;
  (*tmp_t) = gen_tuile_vide();

  struct lelement * llm_p = llm_empty();
  llm_p->data = (struct triplet *)malloc(sizeof(struct triplet));
  struct triplet * tmp_p = (struct triplet *)llm_p->data;
  tmp_p->x = NONE;
  tmp_p->y = NONE;
  tmp_p->z = NONE;

  new_road->lst_tutuille = lnk_empty();
  new_road->nys_idea = lnk_empty();
  lnk_add2(new_road->lst_tutuille,llm_t);
  lnk_add2(new_road->nys_idea,llm_p);

  for(int i = 0;i<PLAYER_MAX;i++){
    new_road->voleurs[i] = 0;
  }
  new_road->avencement = NONE;
  new_road->len = NONE;
  return new_road;
}
 
void copie_tuile(struct tuille * t1, struct tuille * t2){
  for(int i=0;i<4;i++){
    for(int j=0;j<3;j++){
      t1->type[i][j] = t2->type[i][j];
      t1->pion[i][j] = t2->pion[i][j];
    }
  }
  t1->dir = t2->dir;
  t1->milieu = t2->milieu;
  t1->shield = t2->shield;
  t1->position[0] = t2->position[0];
  t1->position[1] = t2->position[1];
  t1->id = t2->id;
}

int attribut_z(int i){
  if( i == 0 )
    return 1;
  else if( i == 1 )
    return 3;
  else if( i == 2 )
    return 7;
  else
    return 5;
}


void FreeRoadVide(struct road * r){
  free(r->lst_tutuille->head->data);
  free(r->lst_tutuille->head);
  free(r->lst_tutuille);
  free(r->nys_idea->head->data);
  free(r->nys_idea->head);
  free(r->nys_idea);
  free(r);
}

int ExtractRoad(struct tuille * tutuille, struct road *roadTuille[]){
  int taille = 0; 
  struct tuille * tmp_t;
  struct triplet * tmp_p;
  for(int i = 0;i<4;i++){
    if(tutuille->type[i][1] == 2){
      tmp_t =(struct tuille *)(roadTuille[taille])->lst_tutuille->head->data;
      tmp_p =(struct triplet *)(roadTuille[taille])->nys_idea->head->data;
      copie_tuile(tmp_t,tutuille);
      tmp_p->x = tutuille->position[0];
      tmp_p->y = tutuille->position[1];
      tmp_p->z = attribut_z(i);
      taille++;
    }
  }
  for(int i=taille;i<4;i++){
    FreeRoadVide(roadTuille[i]);
  }
  return taille;
}
 
int NumberRoad(struct tuille tutuille){
  int res = 0;
  for(int i = 0;i<4;i++){
    if(tutuille.type[i][1] == 2){
      res++;
    }
  }
  return res;
}

int MeepleRoad(struct tuille tutuille, int k){
  if(tutuille.type[k][1] == 2 && tutuille.pion[k][1] != NONE)
    return tutuille.pion[k][1];
  return NONE;
}

int InternFusion(struct tuille tutuille, struct road *roadTuille[],int taille){
  int possesseur = NONE;
  for(int k=0;k<4;k++){
    for(int l=0;l<3;l++){
      if(tutuille.pion[k][l] != NONE && tutuille.type[k][l] == 2)
	possesseur = tutuille.pion[k][l];
    }
  }
  if(NumberRoad(tutuille) != 2){
    for(int i=0;i<taille;i++){
      roadTuille[i]->avencement = 1;
      roadTuille[i]->len = 1;
      struct triplet * transition = (struct triplet * )(roadTuille[i])->nys_idea->head->data;
      if((possesseur != NONE) && (possesseur == MeepleRoad(tutuille,Reverse_z(transition->z))))
	roadTuille[i]->voleurs[possesseur] = 1;
    }
    return taille;
  }
  lnk_add2(roadTuille[0]->nys_idea,roadTuille[1]->nys_idea->head);
  roadTuille[0]->len = 1;
  roadTuille[0]->avencement = 0;
  if(possesseur != NONE)
    roadTuille[0]->voleurs[possesseur] = 1;
  free(roadTuille[1]->lst_tutuille);
  free(roadTuille[1]->nys_idea);
  return 1;
}

void MergeRoad(struct road * r1,struct road * r2){
  lnk_merge(r1->lst_tutuille,r2->lst_tutuille);
  lnk_merge(r1->nys_idea,r2->nys_idea);
  for(int i=0;i<PLAYER_MAX;i++){
    r1->voleurs[i] += r2->voleurs[i];
  }
  r1->len += r2->len;
  r1->avencement += r2->avencement;
  //free(r2);
}

void copy_road(struct road * r1, struct road * r2){
  r1 -> lst_tutuille = r2->lst_tutuille;
  r1 -> nys_idea = r2->nys_idea;
  for(int i = 0;i<PLAYER_MAX;i++){
    r1->voleurs[i] = r2->voleurs[i];
  }
  r1->avencement = r2->avencement;
  r1->len = r2->len;
}

void CreditPointRoad(struct boardgame * boboard, struct road * route){
  int point = route->len;
  int max = route->voleurs[0];
  for(int i = 1;i<PLAYER_MAX;i++){
    if(route->voleurs[i] > max)
      max = route->voleurs[i];
  }
  for(int i=0;i<PLAYER_MAX;i++){
    if(route->voleurs[i] == max)
      boboard->points[i] += point;
    //gestion des meeples
  }
}

struct position DirectionRoad(struct boardgame * boboard,struct triplet t){
  int dir = boboard->board[t.x][t.y].dir;
  int where;
  struct position res;
  if(t.z == 1)
    where = (0 + dir)%4;
  else if(t.z == 3)
    where = (1 + dir)%4;
  else if(t.z == 7)
    where = (2 + dir)%4;
  else if(t.z == 5)
    where = (3 + dir)%4;
  if(where == 0){
    res.x = t.x - 1;
    res.y = t.y;
  }
  else if(where == 1){
    res.x = t.x;
    res.y = t.y-1;
  }
  else if(where == 2){
    res.x = t.x + 1;
    res.y =t.y;
  }
  else if(where == 3){
    res.x = t.x;
    res.y = t.y + 1;
  }
  return res;
}    
//z = 1 -> N, z = 3 -> W, z = 7 S, z= 5 ->E  avec tuile dir = North
//z = 1 -> W, z = 3 -> S, z = 7 E, z= 5 ->N  avec tuile dir = West
//z = 1 -> S, z = 3 -> E, z = 7 N, z= 5 ->W  avec tuile dir = South 
//z = 1 -> E, z = 3 -> N, z = 7 W, z= 5 ->S  avec tuile dir = East

int FindTripletInRoad(struct road * r,struct triplet * t){
  struct lelement * current = r->nys_idea->head;
  struct triplet * test = (struct triplet *)current->data;
  for(int i=0;i<r->nys_idea->taille;i++){
    if(test->x == t->x && test->y == t->y && test->z == t->z)
      return TRUE;
    if(current->next != NULL){
      current = current->next;
      test =(struct triplet *)current->data;
    }
  }
  return FALSE;
}

struct road * FindRoad(struct boardgame * boboard, struct triplet * t){
  struct lelement * current = boboard->roads->head;
  struct road * r =(struct road *)current->data;
  for(int i =0;i<boboard->roads->taille;i++){
    if(FindTripletInRoad(r,t) == TRUE){
      return r;
    }
    if(current->next != NULL){
      current = current->next;
      r = (struct road *)current->data;
    }
  }
  printf("fallait pas\n");
  return NULL;//attention ce n'est pas censé arrivé
}

int Reverse_z(int z){
  if(z == 1)
    return 0;
  else if(z == 3)
    return 1;
  else if(z == 7)
    return 2;
  else 
    return 3;
}

struct triplet NextTriplet(struct triplet * t, struct position p, int dir_next, int dir_origine){
  struct triplet next;
  int reverse_z = (Reverse_z(t->z) + dir_origine)%4;
  next.x = p.x;
  next.y = p.y;

  if( reverse_z == 0)
    next.z = attribut_z((2 - dir_next + 4)%4);

  else if( reverse_z == 1)
    next.z = attribut_z((3 - dir_next + 4)%4);

  else  if( reverse_z == 2)
    next.z = attribut_z((0 - dir_next + 4)%4);

  else if( reverse_z == 3)
    next.z = attribut_z((1 - dir_next + 4)%4);

  return next;
}
    
void RemoveRoad(struct link * roads, struct road * r){
  struct lelement * current = roads->head;
  struct road * route = (struct road * )current->data;
  if(r == route){
    roads->head = current->next;
    current->next->previous = NULL;
    free(current);
    free(route);
    roads->taille -= 1;
    return;
  }
  for(int i=0;i<roads->taille-1;i++){
    if(route == r){
      current->previous->next = current->next;
      current->next->previous = current->previous;
      free(current);
      free(route);
      roads->taille -= 1;
      return;
    }
    current = current->next;
    route = (struct road * )current->data;
  }
  if(route == r){
    roads->tail = current->previous;
    current->previous->next = NULL;
    free(current);
    free(route);
    roads->taille -= 1;
    return;
  } 
  printf("ALERTE SECURITE\n");
}

void ExternFusion(struct boardgame * boboard,struct road * route){
  struct tuille tvide = gen_tuile_vide();

  //creation de llm_r
  struct lelement * llm_r = llm_empty();
  llm_r->data = (struct road * )malloc(sizeof(struct road));
  struct road * tmp_r = (struct road * )llm_r->data;
  copy_road(tmp_r,route);

  //pas de merge possible
  if( route->avencement == 1){
    struct triplet * test =(struct triplet * )route->nys_idea->head->data;
    struct position junction = DirectionRoad(boboard,(*test));

    //pas de route à prolonger
    if(same_card(&tvide,&(boboard->board[junction.x][junction.y])) == TRUE){
      lnk_add2(boboard->roads,llm_r);
      return;
    }

    //une route à prolonger
    else{
      struct triplet next = NextTriplet(test,junction,boboard->board[junction.x][junction.y].dir,boboard->board[test->x][test->y].dir);
      struct road * find = FindRoad(boboard,&next);
      MergeRoad(find,route);
      if(find->avencement == 2)
	CreditPointRoad(boboard,find);
      return;
    }
  }

  //merge possible
  else{
    struct triplet * test1 =(struct triplet * )route->nys_idea->head->data;
    struct triplet * test2 =(struct triplet * )route->nys_idea->head->next->data;
    struct position junction1 = DirectionRoad(boboard,(*test1));
    struct position junction2 = DirectionRoad(boboard,(*test2));

    //pas de route à prolonger
    if(same_card(&tvide,&(boboard->board[junction1.x][junction1.y])) == TRUE && same_card(&tvide,&(boboard->board[junction2.x][junction2.y])) == TRUE){
      lnk_add2(boboard->roads,llm_r);
      return;
    }

    //la route junction1 est à prolonger
    else if(same_card(&tvide,&(boboard->board[junction1.x][junction1.y])) == FALSE && same_card(&tvide,&(boboard->board[junction2.x][junction2.y])) == TRUE){
      struct triplet next1 = NextTriplet(test1,junction1,boboard->board[junction1.x][junction1.y].dir,boboard->board[test1->x][test1->y].dir);
      struct road * find1 = FindRoad(boboard,&next1);
      MergeRoad(find1,route);
      return;
    }
    
    //la route junction 2 est à prolonger
    else if(same_card(&tvide,&(boboard->board[junction1.x][junction1.y])) == TRUE && same_card(&tvide,&(boboard->board[junction2.x][junction2.y])) == FALSE){
      struct triplet next2 = NextTriplet(test2,junction2,boboard->board[junction2.x][junction2.y].dir,boboard->board[test2->x][test2->y].dir);
      struct road * find2 = FindRoad(boboard,&next2);
      MergeRoad(find2,route);
      return;
    }
    //merge
    else{
      struct triplet next3 = NextTriplet(test1,junction1,boboard->board[junction1.x][junction1.y].dir,boboard->board[test1->x][test1->y].dir);
      struct road * find3 = FindRoad(boboard,&next3);
      struct triplet next4 = NextTriplet(test2,junction2,boboard->board[junction2.x][junction2.y].dir,boboard->board[test2->x][test2->y].dir);
      struct road * find4 = FindRoad(boboard,&next4);

      //circular road
      if(find3 == find4){
	MergeRoad(find3,route);
	find3->avencement = 2;
	CreditPointRoad(boboard,find3);
	return;
      }
      MergeRoad(find3,route);
      MergeRoad(find3,find4);
      RemoveRoad(boboard->roads,find4);
      if(find3->avencement == 2)
	CreditPointRoad(boboard,find3);
      return;
    }
  }
}


void UpdateRoad(struct boardgame * boboard, struct tuille tutuille){
  struct road * roadTutuille[4];
  for(int i =0;i<4;i++){
    roadTutuille[i] = RoadVide();
  }
  int numbRoad = ExtractRoad(&tutuille,roadTutuille);
  numbRoad = InternFusion(tutuille,roadTutuille,numbRoad);
  for(int i = 0;i<numbRoad;i++){
    ExternFusion(boboard,roadTutuille[i]);
  }
}



void aff_lnk_tuile(struct link * lnk){
  if(lnk->head == NULL){
    printf("NONE\n");
    return;
  }
  int len = lnk->taille; 
  struct lelement * current = lnk->head;
  struct tuille * t = (struct tuille *)lnk->head->data;
  for(int i =0;i<len;i++){
    printf("tuile %d : pos = (%d, %d), dir = %d, id = %d\n",i,t->position[0],t->position[1],t->dir,t->id);
    if(current->next != NULL)
      current = current->next;
    t = (struct tuille *)current->data;
  }
}

void aff_lnk_nys(struct link * lnk){
  printf("len nys_idea : %d \n",lnk->taille);
  if(lnk->head == NULL){
    printf("NONE\n");
    return;
  }
  int len = lnk->taille;
  struct lelement * current = lnk->head;
  struct triplet * t = (struct triplet *)lnk->head->data;
  for(int i =0;i<len;i++){
    printf("triplet %d : pos = (%d, %d, %d)\n",i,t->x,t->y,t->z);
    if(current->next != NULL){
      current = current->next;
    }
    t = (struct triplet *)current->data;
  }
}

void aff_road(struct road * route){
  printf("----------ROAD---------\n");
  printf(" lst_tuille : \n");
  aff_lnk_tuile(route->lst_tutuille);
  printf(" nys_idea : \n");
  aff_lnk_nys(route->nys_idea);
  printf("voleurs : "); 
  for(int i = 0;i<PLAYER_MAX;i++){
    printf(" player %d : %d |",i,route->voleurs[i]);
  }
  printf("\n");
  printf("avencement : %d\n",route->avencement);
  printf("len : %d\n",route->len);
  printf("-----------------------\n");
}

/*
int main(){
  ///parametre
  struct tuille tutuile = genere_tuille(10);

  ///le code
  struct road * roadTutuille[4];
  for(int i =0;i<4;i++){
    roadTutuille[i] = RoadVide();
  }
  int numbRoad = ExtractRoad(&tutuile,roadTutuille);
  numRoad = InternFusion(tutuile,roadTutuille,numbRoad);
  

  ///affichage
  printf("numbRoad : %d\n",numbRoad);
  for(int i =0;i<4;i++){
    aff_road(roadTutuille[i]);
  }

  return 0;
}
*/
