#include <stdlib.h>
#include <stdio.h>

#include "carte.h"



/** \brief Crée une tuile
* \param id : indice de la tuile à générer
* \return une struct tuille initialisée
* La numerotation des tuiles correspond à celle des regles du jeux qui est fournit sur le pdf.
*/
static struct tuille genere_tuille(int id){
  struct tuille tutuille;
  if(id < 2){
    int tab[4][3] = {{0,0,0},{0,0,0},{0,0,0},{0,2,0}};//N W E S
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 3;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 6) {
    int tab[4][3] = {{0,0,0},{0,0,0},{0,0,0},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 3;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 7) {
    int tab[4][3] = {{1,1,1},{1,1,1},{1,1,1},{1,1,1}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 11) {
    int tab[4][3] = {{0,2,0},{0,0,0},{1,1,1},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 16) {
    int tab[4][3] = {{1,1,1},{0,0,0},{0,0,0},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 18) {
    int tab[4][3] = {{0,0,0},{1,1,1},{1,1,1},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 19) {
    int tab[4][3] = {{1,1,1},{0,0,0},{0,0,0},{1,1,1}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 22) {
    int tab[4][3] = {{0,0,0},{1,1,1},{1,1,1},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 24) {
    int tab[4][3] = {{0,0,0},{0,0,0},{1,1,1},{1,1,1}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 27) {
    int tab[4][3] = {{1,1,1},{0,0,0},{0,2,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 30) {
    int tab[4][3] = {{0,2,0},{0,2,0},{1,1,1},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 33) {
    int tab[4][3] = {{0,2,0},{0,2,0},{1,1,1},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 35) {
    int tab[4][3] = {{1,1,1},{1,1,1},{0,0,0},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 38) {
    int tab[4][3] = {{1,1,1},{1,1,1},{0,0,0},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 40) {
    int tab[4][3] = {{1,1,1},{1,1,1},{0,2,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 43) {
    int tab[4][3] = {{1,1,1},{1,1,1},{0,2,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 44) {
    int tab[4][3] = {{1,1,1},{1,1,1},{1,1,1},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 47) {
    int tab[4][3] = {{1,1,1},{1,1,1},{1,1,1},{0,0,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 49) {
    int tab[4][3] = {{1,1,1},{1,1,1},{1,1,1},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 1;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 50) {
    int tab[4][3] = {{1,1,1},{1,1,1},{1,1,1},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 1;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 58) {
    int tab[4][3] = {{0,2,0},{0,0,0},{0,0,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 67) {
    int tab[4][3] = {{0,0,0},{0,2,0},{0,0,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 2;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 71) {
    int tab[4][3] = {{0,0,0},{0,2,0},{0,2,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else if (id < 72){
    int tab[4][3] = {{0,2,0},{0,2,0},{0,2,0},{0,2,0}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = 0;
    tutuille.shield = 0;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  else{
    int tab[4][3] = {{NONE,NONE,NONE},{NONE,NONE,NONE},{NONE,NONE,NONE},{NONE,NONE,NONE}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = NONE;
    tutuille.shield = NONE;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
  }
  return tutuille;
}



/** \brief Créer un deck
* \param deck : un tableau de tuile
* \return void
* Remplit le deck de taille CARD_MAX grace à genere_tuille, puis le melange grace à des permutations entre des indices aléatoire.
*/
void creer_deck(struct tuille deck[]){
  for(int i=0;i<CARD_MAX;i++){
    deck[i] = genere_tuille(i);
  }
  struct tuille tmp;
  int alea;
  for(int i=0;i<CARD_MAX;i++){
    alea = rand()%(CARD_MAX-i) + i;//rand(i,CARDMAX)
    tmp = deck[i];
    deck[i] = deck[alea];
    deck[alea] = tmp;
  }
}


/** \brief La stratégie de l'IA
* \param board : le plateau de jeu
* \param possibility : la liste des coups jouables
* \param len_tab : la taille de board
* \param len_pos : la taille de possibility
* \return la tuile choisit par l'IA
* choisit une tuile à jouer en fonction d'une liste de possibilité, renvoit tuile nul si il ne peut rien jouer : strat actuel  -> random
*/
struct tuille strat(struct tuille *board[], struct tuille possibility[], int len_tab, int len_pos){
  struct tuille tutuille;
  if(len_tab < 1){
    int tab[4][3] = {{NONE,NONE,NONE},{NONE,NONE,NONE},{NONE,NONE,NONE},{NONE,NONE,NONE}};
    for (int i=0;i<4;i++) {
      for (int j=0;j<3;j++) {
	tutuille.type[i][j] = tab[i][j];
	tutuille.pion[i][j] = NONE;
      }
    }
    tutuille.dir = NORTH;
    tutuille.milieu = NONE;
    tutuille.shield = NONE;
    tutuille.position[0] = NONE;
    tutuille.position[1] = NONE;
    return tutuille;
  }
  else{
    int rand_tuille = rand()%(len_tab);
    return possibility[rand_tuille];
  }
}



/** \brief Est-ce-que 2 cotés coincide ?
* \param type : le bord de la tuile posée
* \param type_test : le bord à comparer
* \return Un booléen
* Si les deux bords coincide ou que bord à comparé est le bord vide alors return true, sinon return false
*/
static int coincide(int type[], int type_test[]){
  for(int i=0;i<3;i++){
    if(!(type_test[i] == NONE || type_test[i]==type[i]))
      return FALSE;
  }
  return TRUE;
}

/** \brief liste les places possibles ,pour une tuile autour d'une autre tuile
* \param board : le plateau de jeux
* \param len : la taille de board
* \param tutuille : la tuile à placer
* \param test : la tuile de reference
* \param res : la liste des places possibles
* \return la listes des possibilités
* liste toutes les positions et toutes les orientations possibles autour de la tuile test avec la tuile tutuile.
*/
static int is_join(struct tuille *board[],int len, struct tuille tutuille,struct tuille test,struct tuille res[]){
  int taille = 0;
  int x = test.position[0];
  int y = test.position[1];
  //on met la tutuille en haut de test
  for(int i =0;i<4;i++){
    if( coincide(tutuille.type[(0+i)%4],(board[x-2][y]).type[3]) && coincide(tutuille.type[(1+i)%4],(board[x-1][y-1]).type[2]) && coincide(tutuille.type[(2+i)%4],(board[x-1][y+1]).type[1]) && coincide(tutuille.type[(3+i)%4],(board[x][y]).type[0])){
      tutuille.dir = i;
      tutuille.position[0] = x-1;
      tutuille.position[1] = y;
      res[taille] = tutuille;
      taille++;
    }
  }
  //on met la tutuille à gauche
  for(int i =0;i<4;i++){
    if( coincide(tutuille.type[(0+i)%4],(board[x-1][y-1]).type[3]) && coincide(tutuille.type[(1+i)%4],(board[x][y-2]).type[2]) && coincide(tutuille.type[(2+i)%4],(board[x][y]).type[1]) && coincide(tutuille.type[(3+i)%4],(board[x+1][y-1]).type[0])){
      tutuille.dir = i;
      tutuille.position[0] = x;
      tutuille.position[1] = y-1;
      res[taille] = tutuille;
      taille++;
    }
  }
  //on met la tutuille à droite
  for(int i =0;i<4;i++){
    if( coincide(tutuille.type[(0+i)%4],(board[x-1][y+1]).type[3]) && coincide(tutuille.type[(1+i)%4],(board[x][y]).type[2]) && coincide(tutuille.type[(2+i)%4],(board[x][y+2]).type[1]) && coincide(tutuille.type[(3+i)%4],(board[x+1][y+1]).type[0])){
      tutuille.dir = i;
      tutuille.position[0] = x;
      tutuille.position[1] = y+1;
      res[taille] = tutuille;
      taille++;
    }
  }
  //on met la tutuille en bas
  for(int i =0;i<4;i++){
    if( coincide(tutuille.type[(0+i)%4],(board[x][y]).type[3]) && coincide(tutuille.type[(1+i)%4],(board[x+1][y-1]).type[2]) && coincide(tutuille.type[(2+i)%4],(board[x+1][y+1]).type[1]) && coincide(tutuille.type[(3+i)%4],(board[x+2][y]).type[0])){
      tutuille.dir = i;
      tutuille.position[0] = x+1;
      tutuille.position[1] = y;
      res[taille] = tutuille;
      taille++;
    }
  }
  return taille;
}


/** \brief Combien il y a de coté libre ?
* \param board : le plateau de jeux
* \param len : la taille de board
* \param x : l'abscisse de la tuile à tester
* \param y : l'ordonnée de la tuile à tester
* \return le nombre de coté libre
* Renvoit combien il y a de tuile vide autour de la tuile en position (x,y) sur le plateau.
*/
static int is_free(struct tuille *board[],int len,int x,int y){
  int booleen = 0;
  if( (board[x+1][y]).milieu == NONE )
    booleen++;
  if(  (board[x-1][y]).milieu == NONE )
    booleen++;
  if(  (board[x][y+1]).milieu == NONE )
    booleen++;
  if(  (board[x][y-1]).milieu == NONE )
    booleen++;
  return booleen;
}


/** \brief Quel sont les possibilité de jeux à partir de tutuille
* \param board : le plateau de jeux
* \param res : la liste des coup jouables
* \param tutuile : la tuile que l'on a pioché
* \param len : la taille de board
* \return la listes des coup jouable à partir de tutuile
* Regarde sur toutes les zones disponible toutes les position et toutes les orientation possibles que l'on peut jouer à partir de tutuile et les renvoit dans une liste.
*/
int display_possibility(struct tuille *board[], struct tuille res[],  struct tuille tutuille, int len){//int = la taille de res
  int taille = 0;
  for(int i=0;i<len;i++){
    for(int j=0;j<len;j++){
      if(is_free(board,len,i,j))
	taille += is_join(board,len,tutuille,board[i][j],res);
    }
  }
  return taille;
}


/** \brief Met à jour les routes
* \param boboard : la struct boardgame
* \param tutuile : la tuile joué
* \return void
* Met à jour le paramétre roads de boboard en fonction des routes presente sur tutuille
*/
static void update_road(struct boardgame * boboard, struct tuille tutuille){
  int x = tutuille.position[0];
  int y = tutuille.position[1];
  struct tuille * adjacent = NULL;
  if(tutuille.type[(0+tutuille.dir)%4][1] == 2){
    adjacent = &(boboard->board[x-1][y]);
    if(adjacent->milieu == NONE){
      struct link * lnk = lnk_empty();
      struct lelement * llm = llm_empty();
      struct lelement * road = llm_empty();
      llm->tutuille = &tutuille;
      lnk_add(lnk,llm);
      road->tutuille = lnk;
      lnk_add(boboard->roads,road);
    }
    else{
      int cmp =0;
      struct lelement current = boboard->roads->head;
      for(int i=0;i<boboard->roads->taille;i++){
	if(llm_find(current->tutuille,adjacent)){
	  cmpt++;
	  llm_add(current->tutuille,&tutuille);
	}
	current = current->next;
      }

    }
  }
}


/** \brief Met à jour les toutes les structures
* \param boboard : la struct boardgame
* \param tutuile : la tuile joué
* \return void
* Met à jour chaque parametre de boboard en fonction des caracteristique de tutuille.
*/
void finition (struct boardgame * boboard, struct tuille tutuille)
{
  boboard->board[tutuille.position[0]][tutuille.position[1]] = tutuille;
  update_roads(boboard,tutuille);
  update_cities(boboard,tutuille);
  update_fields(boboard,tutuille);
}


// juste la pour faire des test.
int main(){

  return 0;
}

